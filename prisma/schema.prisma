// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String                   @id @default(cuid())
  name                String?
  email               String?                  @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  pastcasts           Pastcast[]
  searches            Search[]
  commentInteractions UserCommentInteraction[]
  rooms               Room[]
  CalibrationAnswer   CalibrationAnswer[]
  teams               Team[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id               String     @id @default(cuid())
  title            String
  description      String?
  crowdForecast    Float?
  isDeleted        Boolean    @default(false)
  vantageDate      DateTime
  binaryResolution Boolean
  url              String?
  platform         String?
  fetched          DateTime?
  pastcasts        Pastcast[]
  comments         Comment[]
  rooms            Room[]
}

model Comment {
  // E.g. "metaculus-123"
  id              String   @id @default(cuid())
  isDeleted       Boolean  @default(false)
  content         String
  createdAt       DateTime
  voteTotal       Int      @default(0)
  parentCommentId String?
  questionId      String
  authorName      String
  predictionValue Float?
  fetched         DateTime @db.Timestamp(6)
  platform        String
  question        Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Pastcast {
  userId            String
  questionId        String
  binaryProbability Float?
  score             Float
  skipped           Boolean  @default(false)
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question          Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  timeSpent         Int?     @default(0)
  room              Room?    @relation(fields: [roomId], references: [id])
  roomId            String?

  @@id([questionId, userId])
}

model NewComment {
  id                String                   @id @default(cuid())
  content           String
  questionId        String
  authorId          String
  parentCommentId   String?
  createdAt         DateTime                 @default(now())
  binaryProbability Float?
  userInteraction   UserCommentInteraction[]
}

model UserCommentInteraction {
  userId       String
  newCommentId String
  upvotes      Int        @default(0)
  comment      NewComment @relation(fields: [newCommentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, newCommentId])
}

model Search {
  id       String         @id @default(cuid())
  userId   String
  finished Boolean        @default(false)
  results  SearchResult[]
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SearchResult {
  id         String  @id @default(cuid())
  position   Int
  waybackUrl String
  searchId   String?
  search     Search? @relation(fields: [searchId], references: [id])
}

model Room {
  id                    String     @id @default(cuid())
  name                  String
  createdAt             DateTime   @default(now())
  maxSecondsPerQuestion Int        @default(600)
  totalQuestions        Int        @default(1)
  currentQuestionId     String?
  hostId                String?
  currentStartTime      DateTime?
  isFinshed             Boolean    @default(false)
  pastcasts             Pastcast[]
  questions             Question[]
  members               User[]
}

model CalibrationQuestion {
  id                 String              @id @default(cuid())
  isDeleted          Boolean             @default(false)
  content            String
  answer             Float
  prefix             String              @default("")
  postfix            String              @default("")
  useLogScoring      Boolean             @default(false)
  C                  Float               @default(100)
  source             String              @default("")
  challengeOnly      Boolean             @default(false)
  calibrationAnswers CalibrationAnswer[]
  challenges         Challenge[]
  teamAnswers        TeamFermiAnswer[]
}

model CalibrationAnswer {
  id         String              @id @default(cuid())
  isDeleted  Boolean             @default(false)
  userId     String
  questionId String
  confidence Float               @default(0.5)
  lowerBound Float
  upperBound Float
  score      Float
  timeSpent  Int?                @default(0)
  correct    Boolean
  createdAt  DateTime            @default(now())
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   CalibrationQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Challenge {
  id                  String                @id @default(cuid())
  isDeleted           Boolean               @default(false)
  name                String
  startDate           DateTime
  endDate             DateTime
  fermiQuestions      CalibrationQuestion[]
  aboveBelowQuestions AboveBelowQuestion[]
  teams               Team[]
}

model Team {
  id                   String                 @id @default(cuid())
  name                 String
  challengeId          String
  challenge            Challenge              @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  users                User[]
  fermiAnswers         TeamFermiAnswer[]
  TeamAboveBelowAnswer TeamAboveBelowAnswer[]
}

model TeamFermiAnswer {
  id         String              @id @default(cuid())
  teamId     String
  questionId String
  skipped    Boolean             @default(false)
  lowerBound Float?
  upperBound Float?
  score      Float
  timeSpent  Int?                @default(0)
  correct    Boolean
  createdAt  DateTime            @default(now())
  team       Team                @relation(fields: [teamId], references: [id], onDelete: Cascade)
  question   CalibrationQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model AboveBelowQuestion {
  id            String                 @id @default(cuid())
  isDeleted     Boolean                @default(false)
  content       String
  quantity      String
  answerIsAbove Boolean
  preciseAnswer String
  source        String                 @default("")
  challenges    Challenge[]
  teamAnswers   TeamAboveBelowAnswer[]
}

model TeamAboveBelowAnswer {
  id         String             @id @default(cuid())
  teamId     String
  questionId String
  skipped    Boolean            @default(false)
  score      Float
  timeSpent  Int?               @default(0)
  correct    Boolean
  confidence Float
  createdAt  DateTime           @default(now())
  team       Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  question   AboveBelowQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model MailingListSubscriber {
  id        String   @id @default(cuid())
  email     String
  createdAt DateTime @default(now())
  tags      String[] 
}
