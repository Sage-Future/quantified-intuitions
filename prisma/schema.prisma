// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  pastcasts     Pastcast[]
  searches      Search[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id               String     @id @default(cuid())
  title            String
  description      String?
  crowdForecast    Float?
  isDeleted        Boolean    @default(false)
  vantageDate      DateTime
  binaryResolution Boolean
  url              String?
  platform         String?
  fetched          DateTime?
  pastcasts        Pastcast[]
  comments         Comment[]
}

model Comment {
  // E.g. "metaculus-123"
  id              String   @id @default(cuid())
  isDeleted       Boolean  @default(false)
  content         String
  createdAt       DateTime
  voteTotal       Int      @default(0)
  parentCommentId String?
  questionId      String
  authorName      String
  predictionValue Float?
  fetched         DateTime @db.Timestamp(6)
  platform        String
  question        Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Pastcast {
  userId            String
  questionId        String
  binaryProbability Float?
  score             Float
  skipped           Boolean  @default(false)
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question          Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  timeSpent         Int?     @default(0)

  @@id([questionId, userId])
}

model Search {
  id       String         @id @default(cuid())
  userId   String
  finished Boolean        @default(false)
  results  SearchResult[]
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SearchResult {
  id            String  @id @default(cuid())
  position      Int
  displayedLink String
  link          String
  title         String
  snippet       String
  searchId      String?
  search        Search? @relation(fields: [searchId], references: [id])
}
